{
  "address": "0x3227D93184F77DBa786eee37A783c69aAc7BED08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33b753288a6a449cc834204e0b0bea96718c0af06fd30aff49214072d6ecd4ca",
  "receipt": {
    "to": null,
    "from": "0xFA785ad600d73F9BaF5DB601fB3099FBa76E920A",
    "contractAddress": "0x3227D93184F77DBa786eee37A783c69aAc7BED08",
    "transactionIndex": 21,
    "gasUsed": "1018528",
    "logsBloom": "0x
    "blockHash": "0x98ff5a65a82a77bcb13fe3cf50e182d63456421fd6b000bf044eea3204f602b5",
    "transactionHash": "0x33b753288a6a449cc834204e0b0bea96718c0af06fd30aff49214072d6ecd4ca",
    "logs": [],
    "blockNumber": 10810679,
    "cumulativeGasUsed": "12350528",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "f93f8a1a848fab0768046e777209ecc3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address public immutable i_owner;\\n    address[] public s_funders;\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n}\\n\",\"keccak256\":\"0x444da1a78a37e28878ae4b0d50df53aa867a8277afdef4b3e2bb9930ef31a192\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x816bfc0d7085476448fbd75002e92b51d4498a9d9d5b7944044639b1cf8ebdc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129a3803806200129a833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61110d6200018d6000396000818161026a015281816103fd0152818161061b0152818161081101526108a9015261110d6000f3fe6080604052600436106100865760003560e01c806354861af71161005957806354861af71461013a5780636b69a59214610177578063b60d4288146101a2578063be2693f0146101ac578063dba6335f146101b657610086565b80630343fb251461008b5780630ec3b027146100c85780631bf6132d146100f35780633ccfd60b14610130575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ab1565b6101e1565b6040516100bf9190610af7565b60405180910390f35b3480156100d457600080fd5b506100dd61022a565b6040516100ea9190610b71565b60405180910390f35b3480156100ff57600080fd5b5061011a60048036038101906101159190610ab1565b610250565b6040516101279190610af7565b60405180910390f35b610138610268565b005b34801561014657600080fd5b50610161600480360381019061015c9190610bb8565b610492565b60405161016e9190610bf4565b60405180910390f35b34801561018357600080fd5b5061018c6104d1565b6040516101999190610af7565b60405180910390f35b6101aa6104de565b005b6101b4610619565b005b3480156101c257600080fd5b506101cb6108a7565b6040516101d89190610bf4565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ed576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561039857600080828154811061031257610311610c0f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061039090610c6d565b9150506102f0565b50600067ffffffffffffffff8111156103b4576103b3610cb6565b5b6040519080825280602002602001820160405280156103e25781602001602082028036833780820191505090505b50600090805190602001906103f89291906109a7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161043f90610d16565b60006040518083038185875af1925050503d806000811461047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b606091505b505090508061048f57600080fd5b50565b600081815481106104a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6802b5e3af16b188000061051d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108cb90919063ffffffff16565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610d88565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ad9190610da8565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561072157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d7575b5050505050905060005b81518110156107ac57600082828151811061074957610748610c0f565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a490610c6d565b91505061072b565b50600067ffffffffffffffff8111156107c8576107c7610cb6565b5b6040519080825280602002602001820160405280156107f65781602001602082028036833780820191505090505b506000908051906020019061080c9291906109a7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085390610d16565b60006040518083038185875af1925050503d8060008114610890576040519150601f19603f3d011682016040523d82523d6000602084013e610895565b606091505b50509050806108a357600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806108d783610907565b90506000670de0b6b3a764000085836108f09190610dfe565b6108fa9190610e87565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095057600080fd5b505afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190610f45565b5050509150506402540be4008161099f9190610fc0565b915050919050565b828054828255906000526020600020908101928215610a20579160200282015b82811115610a1f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c7565b5b509050610a2d9190610a31565b5090565b5b80821115610a4a576000816000905550600101610a32565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7e82610a53565b9050919050565b610a8e81610a73565b8114610a9957600080fd5b50565b600081359050610aab81610a85565b92915050565b600060208284031215610ac757610ac6610a4e565b5b6000610ad584828501610a9c565b91505092915050565b6000819050919050565b610af181610ade565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b6000819050919050565b6000610b37610b32610b2d84610a53565b610b12565b610a53565b9050919050565b6000610b4982610b1c565b9050919050565b6000610b5b82610b3e565b9050919050565b610b6b81610b50565b82525050565b6000602082019050610b866000830184610b62565b92915050565b610b9581610ade565b8114610ba057600080fd5b50565b600081359050610bb281610b8c565b92915050565b600060208284031215610bce57610bcd610a4e565b5b6000610bdc84828501610ba3565b91505092915050565b610bee81610a73565b82525050565b6000602082019050610c096000830184610be5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7882610ade565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cab57610caa610c3e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d00600083610ce5565b9150610d0b82610cf0565b600082019050919050565b6000610d2182610cf3565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d72601b83610d2b565b9150610d7d82610d3c565b602082019050919050565b60006020820190508181036000830152610da181610d65565b9050919050565b6000610db382610ade565b9150610dbe83610ade565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df357610df2610c3e565b5b828201905092915050565b6000610e0982610ade565b9150610e1483610ade565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4d57610e4c610c3e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9282610ade565b9150610e9d83610ade565b925082610ead57610eac610e58565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ed781610eb8565b8114610ee257600080fd5b50565b600081519050610ef481610ece565b92915050565b6000819050919050565b610f0d81610efa565b8114610f1857600080fd5b50565b600081519050610f2a81610f04565b92915050565b600081519050610f3f81610b8c565b92915050565b600080600080600060a08688031215610f6157610f60610a4e565b5b6000610f6f88828901610ee5565b9550506020610f8088828901610f1b565b9450506040610f9188828901610f30565b9350506060610fa288828901610f30565b9250506080610fb388828901610ee5565b9150509295509295909350565b6000610fcb82610efa565b9150610fd683610efa565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101557611014610c3e565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105257611051610c3e565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108f5761108e610c3e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110cc576110cb610c3e565b5b82820290509291505056fea26469706673582212200b3c79abb1b2bc787474699d87af59d24c803b87ce5b7d3793fdaa4b6499a79464736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806354861af71161005957806354861af71461013a5780636b69a59214610177578063b60d4288146101a2578063be2693f0146101ac578063dba6335f146101b657610086565b80630343fb251461008b5780630ec3b027146100c85780631bf6132d146100f35780633ccfd60b14610130575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ab1565b6101e1565b6040516100bf9190610af7565b60405180910390f35b3480156100d457600080fd5b506100dd61022a565b6040516100ea9190610b71565b60405180910390f35b3480156100ff57600080fd5b5061011a60048036038101906101159190610ab1565b610250565b6040516101279190610af7565b60405180910390f35b610138610268565b005b34801561014657600080fd5b50610161600480360381019061015c9190610bb8565b610492565b60405161016e9190610bf4565b60405180910390f35b34801561018357600080fd5b5061018c6104d1565b6040516101999190610af7565b60405180910390f35b6101aa6104de565b005b6101b4610619565b005b3480156101c257600080fd5b506101cb6108a7565b6040516101d89190610bf4565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ed576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561039857600080828154811061031257610311610c0f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061039090610c6d565b9150506102f0565b50600067ffffffffffffffff8111156103b4576103b3610cb6565b5b6040519080825280602002602001820160405280156103e25781602001602082028036833780820191505090505b50600090805190602001906103f89291906109a7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161043f90610d16565b60006040518083038185875af1925050503d806000811461047c576040519150601f19603f3d011682016040523d82523d6000602084013e610481565b606091505b505090508061048f57600080fd5b50565b600081815481106104a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b6802b5e3af16b188000061051d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108cb90919063ffffffff16565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610d88565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ad9190610da8565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561072157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d7575b5050505050905060005b81518110156107ac57600082828151811061074957610748610c0f565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107a490610c6d565b91505061072b565b50600067ffffffffffffffff8111156107c8576107c7610cb6565b5b6040519080825280602002602001820160405280156107f65781602001602082028036833780820191505090505b506000908051906020019061080c9291906109a7565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085390610d16565b60006040518083038185875af1925050503d8060008114610890576040519150601f19603f3d011682016040523d82523d6000602084013e610895565b606091505b50509050806108a357600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806108d783610907565b90506000670de0b6b3a764000085836108f09190610dfe565b6108fa9190610e87565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095057600080fd5b505afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190610f45565b5050509150506402540be4008161099f9190610fc0565b915050919050565b828054828255906000526020600020908101928215610a20579160200282015b82811115610a1f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c7565b5b509050610a2d9190610a31565b5090565b5b80821115610a4a576000816000905550600101610a32565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7e82610a53565b9050919050565b610a8e81610a73565b8114610a9957600080fd5b50565b600081359050610aab81610a85565b92915050565b600060208284031215610ac757610ac6610a4e565b5b6000610ad584828501610a9c565b91505092915050565b6000819050919050565b610af181610ade565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b6000819050919050565b6000610b37610b32610b2d84610a53565b610b12565b610a53565b9050919050565b6000610b4982610b1c565b9050919050565b6000610b5b82610b3e565b9050919050565b610b6b81610b50565b82525050565b6000602082019050610b866000830184610b62565b92915050565b610b9581610ade565b8114610ba057600080fd5b50565b600081359050610bb281610b8c565b92915050565b600060208284031215610bce57610bcd610a4e565b5b6000610bdc84828501610ba3565b91505092915050565b610bee81610a73565b82525050565b6000602082019050610c096000830184610be5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7882610ade565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cab57610caa610c3e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d00600083610ce5565b9150610d0b82610cf0565b600082019050919050565b6000610d2182610cf3565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d72601b83610d2b565b9150610d7d82610d3c565b602082019050919050565b60006020820190508181036000830152610da181610d65565b9050919050565b6000610db382610ade565b9150610dbe83610ade565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610df357610df2610c3e565b5b828201905092915050565b6000610e0982610ade565b9150610e1483610ade565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4d57610e4c610c3e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9282610ade565b9150610e9d83610ade565b925082610ead57610eac610e58565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ed781610eb8565b8114610ee257600080fd5b50565b600081519050610ef481610ece565b92915050565b6000819050919050565b610f0d81610efa565b8114610f1857600080fd5b50565b600081519050610f2a81610f04565b92915050565b600081519050610f3f81610b8c565b92915050565b600080600080600060a08688031215610f6157610f60610a4e565b5b6000610f6f88828901610ee5565b9550506020610f8088828901610f1b565b9450506040610f9188828901610f30565b9350506060610fa288828901610f30565b9250506080610fb388828901610ee5565b9150509295509295909350565b6000610fcb82610efa565b9150610fd683610efa565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101557611014610c3e565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105257611051610c3e565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108f5761108e610c3e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110cc576110cb610c3e565b5b82820290509291505056fea26469706673582212200b3c79abb1b2bc787474699d87af59d24c803b87ce5b7d3793fdaa4b6499a79464736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}